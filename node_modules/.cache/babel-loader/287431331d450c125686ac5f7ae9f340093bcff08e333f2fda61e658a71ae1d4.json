{"ast":null,"code":"/*\nCopyright (c) 2011, Chris Umbel\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n*/\n\n'use strict';\n\nconst EventEmitter = require('events');\nconst PorterStemmer = require('../stemmers/porter_stemmer');\nconst parallelTrainer = require('./classifier_train_parallel');\nclass Classifier extends EventEmitter {\n  constructor(classifier, stemmer) {\n    super();\n    this.classifier = classifier;\n    this.docs = [];\n    this.features = {};\n    this.stemmer = stemmer || PorterStemmer;\n    this.lastAdded = 0;\n  }\n  addDocument(text, classification) {\n    // Ignore further processing if classification is undefined\n    if (typeof classification === 'undefined') return;\n\n    // If classification is type of string then make sure it's dosen't have blank space at both end\n    if (typeof classification === 'string') {\n      classification = classification.trim();\n    }\n    if (typeof text === 'string') {\n      text = this.stemmer.tokenizeAndStem(text, this.keepStops);\n    }\n    if (text.length === 0) {\n      // ignore empty documents\n      return;\n    }\n    this.docs.push({\n      label: classification,\n      text: text\n    });\n    for (let i = 0; i < text.length; i++) {\n      const token = text[i];\n      this.features[token] = (this.features[token] || 0) + 1;\n    }\n  }\n  removeDocument(text, classification) {\n    const docs = this.docs;\n    let doc;\n    let pos;\n    if (typeof text === 'string') {\n      text = this.stemmer.tokenizeAndStem(text, this.keepStops);\n    }\n    for (let i = 0, ii = docs.length; i < ii; i++) {\n      doc = docs[i];\n      if (doc.text.join(' ') === text.join(' ') && doc.label === classification) {\n        pos = i;\n      }\n    }\n\n    // Remove if there's a match\n    if (!isNaN(pos)) {\n      this.docs.splice(pos, 1);\n      for (let i = 0, ii = text.length; i < ii; i++) {\n        delete this.features[text[i]];\n      }\n    }\n  }\n  textToFeatures(observation) {\n    const features = [];\n    if (typeof observation === 'string') {\n      observation = this.stemmer.tokenizeAndStem(observation, this.keepStops);\n    }\n    for (const feature in this.features) {\n      if (observation.indexOf(feature) > -1) {\n        features.push(1);\n      } else {\n        features.push(0);\n      }\n    }\n    return features;\n  }\n  train() {\n    const totalDocs = this.docs.length;\n    for (let i = this.lastAdded; i < totalDocs; i++) {\n      const features = this.textToFeatures(this.docs[i].text);\n      this.classifier.addExample(features, this.docs[i].label);\n      this.emit('trainedWithDocument', {\n        index: i,\n        total: totalDocs,\n        doc: this.docs[i]\n      });\n      this.lastAdded++;\n    }\n    this.emit('doneTraining', true);\n    this.classifier.train();\n  }\n  retrain() {\n    this.classifier = new this.classifier.constructor();\n    this.lastAdded = 0;\n    this.train();\n  }\n  getClassifications(observation) {\n    return this.classifier.getClassifications(this.textToFeatures(observation));\n  }\n  classify(observation) {\n    return this.classifier.classify(this.textToFeatures(observation));\n  }\n  static restore(classifier, stemmer) {\n    classifier.stemmer = stemmer || PorterStemmer;\n    return classifier;\n  }\n  save(filename, callback) {\n    const data = JSON.stringify(this);\n    const fs = require('fs');\n    const classifier = this;\n    fs.writeFile(filename, data, 'utf8', function (err) {\n      if (callback) {\n        callback(err, err ? null : classifier);\n      }\n    });\n  }\n  static load(filename, callback) {\n    const fs = require('fs');\n    if (!callback) {\n      return;\n    }\n    fs.readFile(filename, 'utf8', function (err, data) {\n      if (err) {\n        callback(err, null);\n      } else {\n        const classifier = JSON.parse(data);\n        callback(err, classifier);\n      }\n    });\n  }\n  setOptions(options) {\n    this.keepStops = !!options.keepStops;\n  }\n  ClassifiertrainParallel(numThreads, callback) {\n    if (parallelTrainer.Threads) {\n      return parallelTrainer.trainParallel(numThreads, callback);\n    } else {\n      this.emit('No threads available');\n      return this.train();\n    }\n  }\n  trainParallelBatches(options) {\n    if (parallelTrainer.Threads) {\n      return parallelTrainer.trainParallelBatches(options);\n    } else {\n      this.emit('No threads available');\n      return this.train();\n    }\n  }\n  retrainParallel(numThreads, callback) {\n    if (parallelTrainer.Threads) {\n      return parallelTrainer.trainParallel(numThreads, callback);\n    } else {\n      this.emit('No threads available');\n      return this.retrain();\n    }\n  }\n}\nmodule.exports = Classifier;","map":{"version":3,"names":["EventEmitter","require","PorterStemmer","parallelTrainer","Classifier","constructor","classifier","stemmer","docs","features","lastAdded","addDocument","text","classification","trim","tokenizeAndStem","keepStops","length","push","label","i","token","removeDocument","doc","pos","ii","join","isNaN","splice","textToFeatures","observation","feature","indexOf","train","totalDocs","addExample","emit","index","total","retrain","getClassifications","classify","restore","save","filename","callback","data","JSON","stringify","fs","writeFile","err","load","readFile","parse","setOptions","options","ClassifiertrainParallel","numThreads","Threads","trainParallel","trainParallelBatches","retrainParallel","module","exports"],"sources":["C:/ReactJs/my-react-app/node_modules/natural/lib/natural/classifiers/classifier.js"],"sourcesContent":["/*\nCopyright (c) 2011, Chris Umbel\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n*/\n\n'use strict'\n\nconst EventEmitter = require('events')\n\nconst PorterStemmer = require('../stemmers/porter_stemmer')\nconst parallelTrainer = require('./classifier_train_parallel')\n\nclass Classifier extends EventEmitter {\n  constructor (classifier, stemmer) {\n    super()\n    this.classifier = classifier\n    this.docs = []\n    this.features = {}\n    this.stemmer = stemmer || PorterStemmer\n    this.lastAdded = 0\n  }\n\n  addDocument (text, classification) {\n    // Ignore further processing if classification is undefined\n    if (typeof classification === 'undefined') return\n\n    // If classification is type of string then make sure it's dosen't have blank space at both end\n    if (typeof classification === 'string') {\n      classification = classification.trim()\n    }\n\n    if (typeof text === 'string') { text = this.stemmer.tokenizeAndStem(text, this.keepStops) }\n\n    if (text.length === 0) {\n      // ignore empty documents\n      return\n    }\n\n    this.docs.push({\n      label: classification,\n      text: text\n    })\n\n    for (let i = 0; i < text.length; i++) {\n      const token = text[i]\n      this.features[token] = (this.features[token] || 0) + 1\n    }\n  }\n\n  removeDocument (text, classification) {\n    const docs = this.docs\n    let doc\n    let pos\n\n    if (typeof text === 'string') {\n      text = this.stemmer.tokenizeAndStem(text, this.keepStops)\n    }\n\n    for (let i = 0, ii = docs.length; i < ii; i++) {\n      doc = docs[i]\n      if (doc.text.join(' ') === text.join(' ') &&\n          doc.label === classification) {\n        pos = i\n      }\n    }\n\n    // Remove if there's a match\n    if (!isNaN(pos)) {\n      this.docs.splice(pos, 1)\n\n      for (let i = 0, ii = text.length; i < ii; i++) {\n        delete this.features[text[i]]\n      }\n    }\n  }\n\n  textToFeatures (observation) {\n    const features = []\n\n    if (typeof observation === 'string') { observation = this.stemmer.tokenizeAndStem(observation, this.keepStops) }\n\n    for (const feature in this.features) {\n      if (observation.indexOf(feature) > -1) {\n        features.push(1)\n      } else {\n        features.push(0)\n      }\n    }\n\n    return features\n  }\n\n  train () {\n    const totalDocs = this.docs.length\n    for (let i = this.lastAdded; i < totalDocs; i++) {\n      const features = this.textToFeatures(this.docs[i].text)\n      this.classifier.addExample(features, this.docs[i].label)\n      this.emit('trainedWithDocument', { index: i, total: totalDocs, doc: this.docs[i] })\n      this.lastAdded++\n    }\n    this.emit('doneTraining', true)\n    this.classifier.train()\n  }\n\n  retrain () {\n    this.classifier = new (this.classifier.constructor)()\n    this.lastAdded = 0\n    this.train()\n  }\n\n  getClassifications (observation) {\n    return this.classifier.getClassifications(this.textToFeatures(observation))\n  }\n\n  classify (observation) {\n    return this.classifier.classify(this.textToFeatures(observation))\n  }\n\n  static restore (classifier, stemmer) {\n    classifier.stemmer = stemmer || PorterStemmer\n    return classifier\n  }\n\n  save (filename, callback) {\n    const data = JSON.stringify(this)\n    const fs = require('fs')\n    const classifier = this\n    fs.writeFile(filename, data, 'utf8', function (err) {\n      if (callback) {\n        callback(err, err ? null : classifier)\n      }\n    })\n  }\n\n  static load (filename, callback) {\n    const fs = require('fs')\n\n    if (!callback) {\n      return\n    }\n    fs.readFile(filename, 'utf8', function (err, data) {\n      if (err) {\n        callback(err, null)\n      } else {\n        const classifier = JSON.parse(data)\n        callback(err, classifier)\n      }\n    })\n  }\n\n  setOptions (options) {\n    this.keepStops = !!(options.keepStops)\n  }\n\n  ClassifiertrainParallel (numThreads, callback) {\n    if (parallelTrainer.Threads) {\n      return parallelTrainer.trainParallel(numThreads, callback)\n    } else {\n      this.emit('No threads available')\n      return this.train()\n    }\n  }\n\n  trainParallelBatches (options) {\n    if (parallelTrainer.Threads) {\n      return parallelTrainer.trainParallelBatches(options)\n    } else {\n      this.emit('No threads available')\n      return this.train()\n    }\n  }\n\n  retrainParallel (numThreads, callback) {\n    if (parallelTrainer.Threads) {\n      return parallelTrainer.trainParallel(numThreads, callback)\n    } else {\n      this.emit('No threads available')\n      return this.retrain()\n    }\n  }\n}\n\nmodule.exports = Classifier\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}